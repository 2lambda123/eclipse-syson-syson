{"openapi":"3.0.1","info":{"title":"OpenAPI definition","version":"v0"},"paths":{"/api/rest/projects/{projectId}":{"get":{"tags":["project-rest-controller"],"description":"Get project with the given id (projectId).","operationId":"getProjectById","parameters":[{"name":"projectId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}}],"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/Project"}}}}}},"put":{"tags":["project-rest-controller"],"description":"Update the project with the given id (projectId).","operationId":"updateProject","parameters":[{"name":"projectId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}},{"name":"name","in":"query","required":false,"schema":{"type":"string"}},{"name":"description","in":"query","required":false,"schema":{"type":"string"}},{"name":"branch","in":"query","required":false,"schema":{"$ref":"#/components/schemas/Branch"}}],"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/Project"}}}}}},"delete":{"tags":["project-rest-controller"],"description":"Delete the project with the given id (projectId).","operationId":"deleteProject","parameters":[{"name":"projectId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}}],"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/Project"}}}}}}},"/api/rest/projects":{"get":{"tags":["project-rest-controller"],"description":"Get all projects.","operationId":"getProjects","responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Project"}}}}}}},"post":{"tags":["project-rest-controller"],"description":"Create a new project with the given name and description (optional).","operationId":"createProject","parameters":[{"name":"name","in":"query","required":true,"schema":{"type":"string"}},{"name":"description","in":"query","required":false,"schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/Project"}}}}}}},"/api/rest/projects/{projectId}/commits":{"get":{"tags":["commit-rest-controller"],"description":"Get all the commits in the given project.","operationId":"getCommits","parameters":[{"name":"projectId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}}],"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Commit"}}}}}}},"post":{"tags":["commit-rest-controller"],"description":"Create a new commit with the given change (collection\nof DataVersion records) in the given branch of the\nproject. If the branch is not specified, the default branch\nof the project is used. Commit.change should include\nthe following for each Data object that needs to be\ncreated, updated, or deleted in the new commit. (1)\nCreating Data - Commit.change should include a\nDataVersion record with DataVersion.payload\npopulated with the Data being created.\nDataVersion.identity is not provided, thereby indicating\nthat a new DataIdentity needs to be created in the new\ncommit. (2) Updating Data - Commit.change should\ninclude a DataVersion record with DataVersion.payload\npopulated with the updated Data. DataVersion.identity\nshould be populated with the DataIdentity for which a\nnew DataVersion record will be created in the new\ncommit. (3) Deleting Data - Commit.change should\ninclude a DataVersion record with DataVersion.payload\nnot provided, thereby indicating deletion of DataIdentity\nin the new commit. DataVersion.identity should be\npopulated with the DataIdentity that will be deleted in\nthe new commit. When a DataIdentity is deleted in a\ncommit, all its versions (DataVersion) are also deleted,\nand any references from other DataIdentity are also\nremoved to maintain data integrity. In addition, for\nElement Data (KerML), deletion of an Element must\nalso result in deletion of incoming Relationships. When\nElement Data (KerML) is created or updated, derived\nproperties must be computed or verified if the API\nprovider claims Derived Property Conformance.\n","operationId":"createCommit","parameters":[{"name":"projectId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}},{"name":"branchId","in":"query","required":false,"schema":{"type":"string","format":"uuid"}}],"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/Commit"}}}}}}},"/api/rest/projects/{projectId}/commits/{commitId}":{"get":{"tags":["commit-rest-controller"],"description":"Get the commit with the given id (commitId) in the given project.","operationId":"getCommitById","parameters":[{"name":"projectId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}},{"name":"commitId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}}],"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/Commit"}}}}}}},"/api/rest/projects/{projectId}/commits/{commitId}/roots":{"get":{"tags":["object-rest-controller"],"description":"Get all the root elements in the given project at the given commit.","operationId":"getRootElements","parameters":[{"name":"projectId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}},{"name":"commitId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}}],"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"type":"array","items":{"type":"object"}}}}}}}},"/api/rest/projects/{projectId}/commits/{commitId}/elements":{"get":{"tags":["object-rest-controller"],"description":"Get all the elements in a given project at the given commit.","operationId":"getElements","parameters":[{"name":"projectId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}},{"name":"commitId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}}],"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"type":"array","items":{"type":"object"}}}}}}}},"/api/rest/projects/{projectId}/commits/{commitId}/elements/{relatedElementId}/relationships":{"get":{"tags":["object-rest-controller"],"description":"Get relationships that are incoming, outgoing, or both relative to the given related element.","operationId":"getRelationshipsByRelatedElement","parameters":[{"name":"projectId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}},{"name":"commitId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}},{"name":"relatedElementId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}},{"name":"direction","in":"query","required":false,"schema":{"type":"string","enum":["IN","OUT","BOTH"]}}],"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"type":"array","items":{"type":"object"}}}}}}}},"/api/rest/projects/{projectId}/commits/{commitId}/elements/{elementId}":{"get":{"tags":["object-rest-controller"],"description":"Get element with the given id (elementId) in the given project at the given commit.","operationId":"getElementById","parameters":[{"name":"projectId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}},{"name":"commitId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}},{"name":"elementId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}}],"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"type":"object"}}}}}}},"/api/rest/projects/{projectId}/commits/{commitId}/changes":{"get":{"tags":["commit-rest-controller"],"description":"Get the change in the given commit of the given project.","operationId":"getCommitChange","parameters":[{"name":"projectId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}},{"name":"commitId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}},{"name":"changeTypes","in":"query","required":false,"schema":{"type":"array","items":{"type":"string","enum":["CREATED","UPDATED","DELETED"]}}}],"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/DataVersion"}}}}}}}},"/api/rest/projects/{projectId}/commits/{commitId}/changes/{changeId}":{"get":{"tags":["commit-rest-controller"],"description":"Get the change with the given id (changeId) in the given commit of the given project. The changeId is the id of the DataVersion that changed in the commit.","operationId":"getCommitChangeById","parameters":[{"name":"projectId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}},{"name":"commitId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}},{"name":"changeId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}}],"responses":{"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/DataVersion"}}}}}}}},"components":{"schemas":{"Branch":{"required":["@id","created","name","owningProject","referencedCommit"],"type":"object","properties":{"created":{"type":"string","description":"The timestamp at which the CommitReference was created","format":"date-time"},"head":{"$ref":"#/components/schemas/Identified"},"name":{"type":"string","description":"The name of the Branch"},"owningProject":{"$ref":"#/components/schemas/Identified"},"referencedCommit":{"$ref":"#/components/schemas/Identified"},"@id":{"type":"string","description":"The UUID assigned to the record","format":"uuid"},"@type":{"type":"string"}},"description":"Branch is an indirect subclass of Record (via CommitReference) that represents an independent line of development in a Project. A Project can have 1 or more Branches. When a Project is created, a default Branch is also created. The default Branch of a Project can be changed, and a Project can have only 1 default Branch."},"Identified":{"type":"object","properties":{"@id":{"type":"string","format":"uuid"}},"description":"The commit referenced by the Branch"},"Project":{"required":["@id","defaultBranch","name"],"type":"object","properties":{"created":{"type":"string","format":"date-time"},"defaultBranch":{"$ref":"#/components/schemas/Identified"},"description":{"type":"string","description":"The statement that provides details about the record"},"name":{"type":"string","description":"The name of the Project"},"@id":{"type":"string","description":"The UUID assigned to the record","format":"uuid"},"@type":{"type":"string"}},"description":"Project is a subclass of Record that represents a container for other Records and an entry point for version management and data navigation."},"Commit":{"type":"object","properties":{"created":{"type":"string","format":"date-time"},"description":{"type":"string"},"owningProject":{"$ref":"#/components/schemas/Identified"},"previousCommits":{"type":"array","items":{"$ref":"#/components/schemas/Identified"}},"@id":{"type":"string","format":"uuid"},"@type":{"type":"string"}}},"DataIdentity":{"required":["@id"],"type":"object","properties":{"@id":{"type":"string","description":"The UUID assigned to the record","format":"uuid"},"@type":{"type":"string"}},"description":"DataIdentity is a subclass of Record that represents a unique, version-independent representation of Data through its lifecycle. A DataIdentity is associated with 1 or more DataVersion records that represent different versions of the same Data."},"DataVersion":{"required":["@id"],"type":"object","properties":{"identity":{"$ref":"#/components/schemas/DataIdentity"},"payload":{"type":"object","description":"The Payload assigned to the record"},"@id":{"type":"string","description":"The UUID assigned to the record","format":"uuid"},"@type":{"type":"string"}},"description":"DataVersion is a subclass of Record that represents Data at a specific version in its lifecycle. A DataVersion record is associated with only one DataIdentity record. DataVersion serves as a wrapper for Data (payload) in the context of a Commit in a Project."}}}}